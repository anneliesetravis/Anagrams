words = open("words.txt", "r").readlines()def make_anagram_dict(words):    """    Returns a dictionary whose keys are the letters of a word sorted alphabetically,    and whose values are all the anagrams of the key in the given words list.    Arguments:    :param words: the list of words to be turned int the dictionary    :return: a dictionary as described above    """    dictionary = {}        for word in words:                word = word.strip()        sorted_word = sorted(list(word))        sorted_word = "".join(sorted_word)                if sorted_word not in dictionary:            dictionary[sorted_word] = []                    dictionary[sorted_word].append(word)            return dictionarydef find_most_anagrams(dictionary):    """    Finds the largest anagram group in a given dictionary of anagrams.    Arguments:    :param dictionary: a dictionary of anagrams    :return: the largest group of anagrams in the dictionary    """    most = []    #finding the dictionary key with the most values    for i in dictionary:        if len(dictionary[i]) > len(most):            most = dictionary[i]                return mostdef find_longest_pair(dictionary):    """    Finds the longest pair of words that are anagrams of each other in    a given dictionary of anagrams.    Arguments:    :param dictionary: a dictionary of anagrams    :return: the longest pair of anagrams in the dictionary        """    longest = ""        for i in dictionary:        #ignoring keys with only one value as these have no anagrams        if len(dictionary[i]) > 1:                        if len(i) > len(longest):                longest = i                    return dictionary[longest]if __name__ == "__main__":        anagram_dictionary = make_anagram_dict(words)    print("Anagram group with most variants:")    print(", ".join(find_most_anagrams(anagram_dictionary)))    print("Longest anagram pair:", ", ".join(find_longest_pair(anagram_dictionary)))    